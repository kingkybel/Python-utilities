#!/usr/bin/bash

{{cookiecutter.licence}}

[[ "${0}" != "${BASH_SOURCE[0]}" ]] && THIS_FILE="${BASH_SOURCE[0]}" || THIS_FILE="${0}"
THIS_DIR=$(realpath "$(dirname ${THIS_FILE})")

[ -f "${THIS_DIR}/build/bin/{{cookiecutter.project_name_lower}}" ] || {
    mkdir -p "${THIS_DIR}/build"
    pushd "${THIS_DIR}/build"
    cmake .. || {
      echo "Error configuring (cmake'ing) project"
      exit 1
    }
    BUILD_LIBS=$(grep -o -E "[a-z_]+_lib" Makefile | sort -u | xargs)
    BUILD_EXES=$(grep -o -E "[a-z_]+_exe" Makefile | sort -u | xargs)
    BUILD_TESTS=$(grep -o -E "run_[a-z_]+_tests" Makefile | sort -u | xargs)

    if [ "${BUILD_LIBS}" != "" ]; then
      make -j $(nproc --all) $(grep -o -E "[a-z_]+_lib" Makefile | sort -u | xargs) || {
        echo "Error building (make'ing) project libraries"
        exit 1
      }
    fi
    if [ "${BUILD_EXES}" != "" ]; then
      make -j $(nproc --all) $(grep -o -E "[a-z_]+_exe" Makefile | sort -u | xargs) || {
        echo "Error building (make'ing) project executables"
        exit 1
      }
    fi
    if [ "${BUILD_TESTS}" != "" ]; then
      make -j $(nproc --all) $(grep -o -E "run_[a-z_]+_tests" Makefile | sort -u | xargs) || {
        echo "Error building (make'ing) project tests"
        exit 1
      }
    fi
    popd
}

{{cookiecutter.docker_build_command}}

